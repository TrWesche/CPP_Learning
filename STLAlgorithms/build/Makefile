# Alternative GNU Make workspace makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

ifeq ($(config),debug)
  STD_ContainerChecks_config = debug
  STD_ForEach_config = debug
  STD_MaxMin_config = debug
  STD_Find_config = debug
  STD_Copy_config = debug
  STD_Sort_config = debug
  STD_Transform_config = debug
  ProjectName_config = debug

else ifeq ($(config),release)
  STD_ContainerChecks_config = release
  STD_ForEach_config = release
  STD_MaxMin_config = release
  STD_Find_config = release
  STD_Copy_config = release
  STD_Sort_config = release
  STD_Transform_config = release
  ProjectName_config = release

else
  $(error "invalid configuration $(config)")
endif

PROJECTS := STD_ContainerChecks STD_ForEach STD_MaxMin STD_Find STD_Copy STD_Sort STD_Transform ProjectName

.PHONY: all clean help $(PROJECTS) Core Dependencies

all: $(PROJECTS)

Core: ProjectName

Dependencies: STD_ContainerChecks STD_Copy STD_Find STD_ForEach STD_MaxMin STD_Sort STD_Transform

STD_ContainerChecks:
ifneq (,$(STD_ContainerChecks_config))
	@echo "==== Building STD_ContainerChecks ($(STD_ContainerChecks_config)) ===="
	@${MAKE} --no-print-directory -C STD_ContainerChecks -f Makefile config=$(STD_ContainerChecks_config)
endif

STD_ForEach:
ifneq (,$(STD_ForEach_config))
	@echo "==== Building STD_ForEach ($(STD_ForEach_config)) ===="
	@${MAKE} --no-print-directory -C STD_ForEach -f Makefile config=$(STD_ForEach_config)
endif

STD_MaxMin:
ifneq (,$(STD_MaxMin_config))
	@echo "==== Building STD_MaxMin ($(STD_MaxMin_config)) ===="
	@${MAKE} --no-print-directory -C STD_MaxMin -f Makefile config=$(STD_MaxMin_config)
endif

STD_Find:
ifneq (,$(STD_Find_config))
	@echo "==== Building STD_Find ($(STD_Find_config)) ===="
	@${MAKE} --no-print-directory -C STD_Find -f Makefile config=$(STD_Find_config)
endif

STD_Copy:
ifneq (,$(STD_Copy_config))
	@echo "==== Building STD_Copy ($(STD_Copy_config)) ===="
	@${MAKE} --no-print-directory -C STD_Copy -f Makefile config=$(STD_Copy_config)
endif

STD_Sort:
ifneq (,$(STD_Sort_config))
	@echo "==== Building STD_Sort ($(STD_Sort_config)) ===="
	@${MAKE} --no-print-directory -C STD_Sort -f Makefile config=$(STD_Sort_config)
endif

STD_Transform:
ifneq (,$(STD_Transform_config))
	@echo "==== Building STD_Transform ($(STD_Transform_config)) ===="
	@${MAKE} --no-print-directory -C STD_Transform -f Makefile config=$(STD_Transform_config)
endif

ProjectName: STD_ContainerChecks STD_ForEach STD_MaxMin STD_Find STD_Copy STD_Sort STD_Transform
ifneq (,$(ProjectName_config))
	@echo "==== Building ProjectName ($(ProjectName_config)) ===="
	@${MAKE} --no-print-directory -C ProjectName -f Makefile config=$(ProjectName_config)
endif

clean:
	@${MAKE} --no-print-directory -C STD_ContainerChecks -f Makefile clean
	@${MAKE} --no-print-directory -C STD_ForEach -f Makefile clean
	@${MAKE} --no-print-directory -C STD_MaxMin -f Makefile clean
	@${MAKE} --no-print-directory -C STD_Find -f Makefile clean
	@${MAKE} --no-print-directory -C STD_Copy -f Makefile clean
	@${MAKE} --no-print-directory -C STD_Sort -f Makefile clean
	@${MAKE} --no-print-directory -C STD_Transform -f Makefile clean
	@${MAKE} --no-print-directory -C ProjectName -f Makefile clean

help:
	@echo "Usage: make [config=name] [target]"
	@echo ""
	@echo "CONFIGURATIONS:"
	@echo "  debug"
	@echo "  release"
	@echo ""
	@echo "TARGETS:"
	@echo "   all (default)"
	@echo "   clean"
	@echo "   STD_ContainerChecks"
	@echo "   STD_ForEach"
	@echo "   STD_MaxMin"
	@echo "   STD_Find"
	@echo "   STD_Copy"
	@echo "   STD_Sort"
	@echo "   STD_Transform"
	@echo "   ProjectName"
	@echo ""
	@echo "For more information, see https://github.com/premake/premake-core/wiki"